# -*- coding: utf-8 -*-
"""AdolfoExercicio_PauloBittencourt

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XMIsZhIZPAUdvnOBmA0zNYOcNCCW_Qk2
"""

import random
import numpy
from deap import creator, base, tools, algorithms

Numero_Itens = 20
NGEN = 10
random.seed(64)

itens = {}
for i in range(20):
  itens[i] = (random.randint(1, 10), random.uniform(0, 100))

creator.create("FitnessMax", base.Fitness, weights=(-1.0, 1.0))

creator.create("Individuo",list, fitness = creator.FitnessMax)

toolbox = base.Toolbox()

toolbox.register("attr", random.randrange, Numero_Itens)

toolbox.register("individuo", tools.initRepeat, 
                 creator.Individuo, toolbox.attr, 5)

toolbox.register("populacao", tools.initRepeat, list, toolbox.individuo)

def evalIten(individuo):
  weight = 0.0
  value = 0.0
  for item in individuo:
    weight += itens[item][0]
    value += itens[item][1]
    if len(individuo) > 20 or weight > 80:
      return 10000, 0
    return weight, value

toolbox.register("evaluate", evalIten)
toolbox.register("mate", tools.cxTwoPoint)
toolbox.register("mutate", tools.mutFlipBit, indpb = 0.05)
toolbox.register("select", tools.selNSGA2)

def main():
  random.seed(64)
  Lambda = 100
  mul = 50
  Cxpb = 0.5
  Mutpb = 0.1

  populations =toolbox.populacao(n = mul)
  fama = tools.ParetoFront()
  stats = tools.Statistics(lambda ind: ind.fitness.values)
  stats.register("media", numpy.mean, axis=0)
  stats.register("std", numpy.std, axis=0)
  stats.register("min", numpy.min, axis=0)
  stats.register("max", numpy.max, axis=0)

  algorithms.eaMuPlusLambda(populations, toolbox, mul, Lambda, Cxpb, Mutpb,
                            NGEN, stats, halloffame = fama)
  
  
top10 = tools.selBest(population, k=10)

print("Esses são os melhores Individuos da ultima posição:\n")
print(top10[0])
print("-" * 500)
main()